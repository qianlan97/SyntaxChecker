Token name          Pattern
========================================================================================================================
FUNC                "func"
RETURN              "return"
VAR                 "var"
IF                  "if"
THEN                "then"
ELSE                "else"
BEGIN               "begin"
END                 "end"
WHILE               "while"
LPAREN              "("
RPAREN              ")"
LBRACKET            "["
RBRACKET            "]"
VOID                "void"
INT                 "int"
BOOL                "bool"
NEW                 "new"
SIZE                "size"
PRINT               "print"
ASSIGN              "<-"
FUNCRET             "->"
TYPEOF              "::"
RELOP               "<"|">"|"<="|">="|"="|"!="
EXPROP              "+"|"-"|"or"
TERMOP              "*"|"/"|"and"
SEMI                ";"
COMMA               ","
DOT                 "."
BOOL_LIT            "true"|"false"
INT_LIT             [0-9]+
IDENT               [a-zA-Z_][a-zA-Z0-9_]*
COMMENT             "//".*
NEWLINE             \n
WHITESPACE          [ \t\r]+
BLKCOMMENT          "<!--"[^]*"-->"



Grammar                                                                     Description
========================================================================================================================
program         -> decl_list                                                                                    declaration of program

decl_list       -> decl_list fun_decl                                                                           declaration of function list
                 | ϵ

fun_decl        -> FUNC IDENT TYPEOF LPAREN params RPAREN FUNCRET prim_type BEGIN local_decls stmt_list END     declaration of a function

params          -> param_list                                                                                   parameter list (including empty param)
                 | ϵ

param_list      -> param_list COMMA param                                                                       parameter list (more than one params)
                 | param

param           -> IDENT TYPEOF type_spec                                                                       parameter

type_spec       -> prim_type                                                                                    primitive type
                 | prim_type LBRACKET RBRACKET                                                                  array type

prim_type       -> INT                                                                                          int type
                 | BOOL                                                                                         bool type

local_decls     -> local_decls local_decl                                                                       declaration of local variable list
                 | ϵ

local_decl      -> VAR IDENT TYPEOF type_spec SEMI                                                              declaration of local variable

stmt_list       -> stmt_list stmt                                                                               statement list
                 | ϵ

stmt            -> expr_stmt                                                                                    statement
                 | print_stmt
                 | return_stmt
                 | if_stmt
                 | while_stmt
                 | compound_stmt

expr_stmt       -> IDENT ASSIGN expr SEMI                                                                       expression statement (ex: x <- y + 1 )

print_stmt      -> PRINT expr SEMI

return_stmt     -> RETURN expr SEMI

if_stmt         -> IF expr THEN stmt_list ELSE stmt_list END

while_stmt      -> WHILE expr BEGIN stmt_list END

compound_stmt   -> BEGIN local_decls stmt_list END

args            -> arg_list                                                                                     function call argument list (including empty list)
                 | ϵ

arg_list        -> arg_list COMMA expr                                                                          function call argument list (more than one argument)
                 | expr

expr            -> expr EXPROP  term                                                                            expr-operation (+,-,or)
                 | expr RELOP   term                                                                            rel-operation  (<,>,<=,>=,!=,=)
                 | term

term            -> term TERMOP  factor                                                                          term-operation (*,/,and)
                 | factor

factor          -> LPAREN expr RPAREN                                                                           ( ... ) equation
                 | IDENT                                                                                        value of a variable
                 | INT_LIT                                                                                      int value
                 | BOOL_LIT                                                                                     bool value
                 | IDENT LPAREN args RPAREN                                                                     function call
                 | NEW prim_type LBRACKET expr RBRACKET                                                         new array operation (ex: new int[3])
                 | IDENT LBRACKET expr RBRACKET                                                                 array element access
                 | IDENT DOT SIZE                                                                               get array size



Non-left-recursive grammar of the above grammar
========================================================================================================================
      program -> decl_list

    decl_list -> decl_list'

   decl_list' -> fun_decl decl_list'
               | ϵ

     fun_decl -> FUNC IDENT TYPEOF LPAREN params RPAREN FUNCRET prim_type BEGIN local_decls stmt_list END

       params -> param_list
               | ϵ

   param_list -> param param_list'

  param_list' -> COMMA param param_list'
               | ϵ

        param -> IDENT TYPEOF type_spec

    type_spec -> prim_type type_spec'

   type_spec' -> LBRACKET RBRACKET
               | ϵ

    prim_type -> INT
               | BOOL

  local_decls -> local_decls'

 local_decls' -> local_decl local_decls'
               | ϵ

   local_decl -> VAR IDENT TYPEOF type_spec SEMI

    stmt_list -> stmt_list'

   stmt_list' -> stmt stmt_list'
               | ϵ

         stmt -> expr_stmt
               | print_stmt
               | return_stmt
               | if_stmt
               | while_stmt
               | compound_stmt

    expr_stmt -> IDENT ASSIGN expr SEMI

   print_stmt -> PRINT expr SEMI

  return_stmt -> RETURN expr SEMI

      if_stmt -> IF expr THEN stmt_list ELSE stmt_list END

   while_stmt -> WHILE expr BEGIN stmt_list END

compound_stmt -> BEGIN local_decls stmt_list END

         args -> arg_list
               | ϵ

     arg_list -> expr arg_list'

    arg_list' -> COMMA expr arg_list'
               | ϵ

         expr -> term expr'

        expr' -> EXPROP term expr'
               | RELOP term expr'
               | ϵ

         term -> factor term'

        term' -> TERMOP factor term'
               | ϵ

       factor -> IDENT factor'
               | LPAREN expr RPAREN
               | INT_LIT
               | BOOL_LIT
               | NEW prim_type LBRACKET expr RBRACKET

      factor' -> LPAREN args RPAREN
               | LBRACKET expr RBRACKET
               | DOT SIZE
               | ϵ
